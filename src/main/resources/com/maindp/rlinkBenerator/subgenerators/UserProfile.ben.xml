<setup xmlns="https://www.benerator.de/schema/3.1.0-jdk-11"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="https://www.benerator.de/schema/3.1.0-jdk-11 benerator-3.1.0-jdk-11.xsd">

    <import domains="person,address"/>

    <echo>
        Populates 'User' and 'Profile' tables
    </echo>

    <comment>Больше для примера - js скрипт</comment>
    <execute type="js">
        function add(value) {
        if (!value) return null;
        return value + 50000;
        }

        function createJson(value) {
        return JSON.stringify({ data: value ?? 'Заполнил данными' });
        }
    </execute>

    <bean id="date" class="com.maindp.rlinkBenerator.date.CurrentTimestampGenerator"/>

    <comment>Устраняю проблему с конвертацией в enum типы</comment>
    <execute target="db">
        alter table "Profile"
        alter column status type varchar using status::varchar;
    </execute>
    <comment>Устраняю проблему с конвертацией в jsonb, хотя надо юзать конвертеры, но мне лень</comment>
    <execute target="db">
        alter table "Profile"
        alter column education type text using education::text;

        alter table "Profile"
        alter column experience type text using experience::text;

        alter table "Profile"
        alter column about type text using about::text;
    </execute>

    <generate type="Profile" count="20" consumer="db">

        <comment>Генерация пользователя внутри генерации профиля, чтобы был доступен конкретный userId для профиля,
            т.к. необходима связь 1-to-1
        </comment>

        <generate type="User" count="1" consumer="db">
            <comment>Делаем генерацию по HibUUIDGenerator</comment>
            <id name="id" generator="HibUUIDGenerator"/>

            <comment>Используем встроенный генератор людей и кладём созданного человека в переменную</comment>
            <variable name="person" generator="PersonGenerator"/>

            <comment>Из домена берутся в основном адреса и телефоны</comment>
            <variable name="address" generator="AddressGenerator"/>

            <comment>Используем переменную с человеком, как источник данных для наших полей</comment>
            <attribute name="firstName" source="person.givenName"/>
            <attribute name="secondName" source="person.familyName"/>
            <attribute name="thirdName" source="person.secondGivenName"/>
            <attribute name="email" source="person.email"/>
            <attribute name="password" constant="1"/>
            <attribute name="birthDate" type="date" source="person.birthDate"/>

            <attribute name="country" source="address.country.name"/>
            <attribute name="city" source="address.city.name"/>
            <attribute name="phone" source="address.mobilePhone"/>

            <attribute name="role" mode="ignored"/>

            <attribute name="updatedAt" generator="CurrentTimestampGenerator"/>
        </generate>

        <comment>Генерация профиля под созданного пользователя</comment>

        <comment>Делаем генерацию по HibUUIDGenerator</comment>
        <id name="id" generator="HibUUIDGenerator"/>

        <attribute name="status" values="'SEARCHING', 'CONSIDERING', 'NOT_SEEKING'"/>

        <comment>Берём userId из выше созданного объекта</comment>
        <attribute name="userId" source="User.id"/>

        <comment>Скрипты реализованы не очень, но если нужно, то можно и заюзать</comment>
        <comment>Чтобы передавать что-то в скрипт, то нужно сделать объявить эту переменную</comment>
        <variable name="educationValue" values="'Окончил Гарвард', 'Окончил университет Дубна', 'Окончил школу'"
                  distribution="random"/>
        <comment>Через nullQuota можно регулировать вероятность создания null элемента (по умолчанию = 0)</comment>
        <attribute name="education" script="{js:createJson(educationValue)}" nullQuota="0.05"/>

        <variable name="experienceValue" values="'Работаю в Иннотехе', 'Работаю в Вебби'"
                  distribution="random"/>
        <attribute name="experience" script="{js:createJson(experienceValue)}" nullQuota="0.05"/>

        <variable name="aboutValue" values="'Я хороший админ', 'Я нехороший пользователь'"
                  distribution="random"/>
        <attribute name="about" script="{js:createJson(aboutValue)}" nullQuota="0.05"/>

        <variable name="minSalary" type="int" min="15000" max="600000" granularity="5000"/>
        <attribute name="minSalary" source="minSalary"/>
        <attribute name="maxSalary" type="int" script="{js:add(minSalary)}"/>

        <attribute name="experienceDuration" type="int" min="6" max="60" granularity="6"/>

        <attribute name="updatedAt" generator="CurrentTimestampGenerator"/>
    </generate>

    <execute target="db">
        alter table "Profile"
        alter column status type "ProfileStatus" using status::"ProfileStatus";
    </execute>

    <execute target="db">
        alter table "Profile"
        alter column education type jsonb using education::jsonb;

        alter table "Profile"
        alter column experience type jsonb using experience::jsonb;

        alter table "Profile"
        alter column about type jsonb using about::jsonb;
    </execute>
</setup>